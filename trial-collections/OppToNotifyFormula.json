{"id":21248,"name":"Opp >> Notify","description":"Detect Update to Opportunity and Slack it!","userId":3915,"accountId":4115,"createdDate":"2018-07-30T22:05:33Z","steps":[{"id":122584,"onSuccess":["sendMessage"],"onFailure":["gracefulExit"],"name":"createMessage","type":"script","properties":{"body":"let text = `${steps.getOpportunityOwnerInfo.response.body.name} has updated the opportunity \"${steps.getSourceInfo.response.body.name}\" in ${steps.getElementName.response.body.name} to \"${steps.getSourceInfo.response.body.stageName}\".`;\nconst message = {\n  \"text\": text\n};\ndone(message);"}},{"id":122583,"onSuccess":["getElementName"],"onFailure":["gracefulExit"],"name":"eventTypeCheck","type":"filter","properties":{"body":"const theEvent = trigger.event.eventType;\nconst theObject = trigger.event.objectType;\nconsole.log(config);\n// console.log(theEvent);\n// console.log(theObject);\n\n// Decide if correct type of event and object\n// config.eventTypes should be string, e.g. 'updated' or 'updated,created'\nconst correctEventType = () => config.events.split(',').some(type => type === theEvent.toLowerCase());\n// Decide if the event was of the correct object name\nconst correctObj = () => theObject === config.object;\n\ndone(correctEventType() && correctObj());"}},{"id":123435,"onSuccess":["getSourceInfo"],"onFailure":[],"name":"getElementName","type":"elementRequest","properties":{"elementInstanceId":"${config.source}","method":"GET","api":"/elements/${trigger.event.elementKey}"}},{"id":122585,"onSuccess":["getOpportunityOwnerInfo"],"onFailure":[],"name":"getObjectInfo","type":"elementRequest","properties":{"elementInstanceId":"${config.source}","method":"GET","api":"/${steps.switchForCorrectVDR.vdr}/${trigger.event.objectId}"}},{"id":122586,"onSuccess":["getOpportunityOwnerInfo"],"onFailure":[],"name":"getOpportunityOwnerId","type":"script","properties":{"body":"return steps.getObjectInfo.response.body.ownerId;"}},{"id":122587,"onSuccess":["createMessage"],"onFailure":[],"name":"getOpportunityOwnerInfo","type":"elementRequest","properties":{"elementInstanceId":"${config.source}","method":"GET","api":"/${config.userVDR}/${steps.getSourceInfo.response.body.ownerId}"}},{"id":122666,"onSuccess":["getOpportunityOwnerInfo"],"onFailure":[],"name":"getSourceInfo","type":"elementRequest","properties":{"elementInstanceId":"${config.source}","method":"GET","api":"/${config.oppVDR}/${trigger.event.objectId}"}},{"id":122588,"onSuccess":[],"onFailure":[],"name":"gracefulExit","type":"script","properties":{"body":"return false;"}},{"id":122589,"onSuccess":[],"onFailure":[],"name":"sendMessage","type":"elementRequest","properties":{"body":"${steps.createMessage}","elementInstanceId":"${config.destination}","method":"POST","api":"/hubs/collaboration/channels/${config.channel}/messages"}},{"id":122590,"onSuccess":["getOpportunityOwnerInfo"],"onFailure":[],"name":"switchForCorrectVDR","type":"script","properties":{"body":"switch (trigger.event.objectType) {\n    case 'Opportunity':\n    case 'Opportunities':\n    case 'opportunity':\n      done({vdr: 'demoCenterOpportunities'});\n      break;\n    case 'lead':\n    case 'leads':\n    case 'Lead':\n      done({vdr:'demoCenterLeads'});\n      break;\n    default:\n      done();\n      break;\n}"}}],"triggers":[{"id":19278,"onSuccess":["eventTypeCheck"],"onFailure":[],"type":"event","async":true,"name":"trigger","properties":{"elementInstanceId":"${config.source}"}}],"engine":"v3","active":true,"debugLoggingEnabled":true,"singleThreaded":false,"configuration":[{"id":36147,"key":"channel","name":"channel","type":"value","required":true},{"id":36142,"key":"destination","name":"destination","type":"elementInstance","required":true},{"id":36143,"key":"events","name":"events","type":"value","required":true},{"id":36166,"key":"object","name":"object","type":"value","required":true},{"id":36145,"key":"oppVDR","name":"oppVDR","type":"value","required":true},{"id":36146,"key":"source","name":"source","type":"elementInstance","required":true},{"id":36343,"key":"userVDR","name":"userVDR","type":"value","required":true}]}